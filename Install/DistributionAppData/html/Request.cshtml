@inherits Westwind.RazorHosting.RazorTemplateFolderHost<HttpRequestData>
@using WebSurge
@using System.Linq
@{    
    string responseBodyType = Model.GetTypeOfContent();
    string requestBodyType = Model.GetTypeOfContent(Model.ContentType);
    string cssClass = null;
    if (!string.IsNullOrEmpty(Model.StatusCode))
    {
        cssClass = Model.StatusCode.CompareTo("399") > 0 ? "error-response" : "success-response";
    }
}
<!DOCTYPE HTML>
<html>
<head>
    <meta charset="utf-8"> 
    <link href='css/WebSurge.css' type='text/css' rel='stylesheet' />
    <link href='css/font-awesome.css' type='text/css' rel='stylesheet' />
    <link href='css/request.css' type='text/css' rel='stylesheet' />
</head>
<body>
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class='error-display'>
            <div class="error-header">
                <div style="float: left;"><i class="fa fa-exclamation-circle"></i></div>
                <div style="padding-left: 25px;">@Model.ErrorMessage</div>
            </div>
        </div>
    }

    <div class="header" style="margin-top: 0;">

        <i class="fa fa-minus-square code-collapse"></i> <i class="fa fa-upload"></i> Request Headers
    </div>
@{
    var sb = new StringBuilder();
    foreach (WebSurge.HttpRequestHeader header in @Model.Headers.Where(h=> !string.IsNullOrEmpty(h.Value) )) {
        sb.AppendLine(header.Name + ": " + header.Value);
    }
    var headers = sb.ToString().Trim();
}

<div class="codewrapper grey-gradient">        
    <div class="first-line"><span id="HttpVerb">@Model.HttpVerb</span> <a href='@Model.Url'>@Model.Url</a> HTTP/1.1</div>
    <pre id="RequestHeaders">@headers</pre>
</div>
    @if (!string.IsNullOrEmpty(Model.RequestContent))
    {

        <div class="header" style="margin-top: 0;">
            @if (!string.IsNullOrEmpty(requestBodyType))
            {
                if ("json,xml,urlencoded".Contains(requestBodyType))
                {
                    <div class="formattingRequestBody">
                        <a href="javascript:{}" data-id="Formatted" title="See a formatted and syntax colored view of the HTTP response based on the content type">Formatted @requestBodyType</a>
                        <a href="javascript:{}" data-id="Raw" class="active" title="The raw HTTP response content as returned by the server">Raw Request</a>

                    </div>
                }
            }
            <i class="fa fa-minus-square code-collapse"></i>
            <i class="fa fa-cloud-upload"></i> Request Content
        </div>
        <div class="codewrapper grey-gradient">
            <pre class="grey-gradient" id="RequestBodyRaw" style="display:none">@Model.GetRequestContentAsString()</pre>
            @if (!string.IsNullOrEmpty(requestBodyType))
            {
                <pre id="RequestBodyFormatted" style="display:none">@Model.GetFormattedContent(Model.GetRequestContentAsString(),requestBodyType)</pre>
            }
        </div>
    }

    @if (Model.StatusCode != null)
    {
        <div class="header">
            <i class="fa fa-minus-square code-collapse"></i>
            <i class="fa fa-download"></i> Http Response Headers
            <div class='timetaken'>
                @if(Model.ResponseLength > 0) {
                   <text>@Model.ResponseLength.ToString("n0") bytes &nbsp;&nbsp;&nbsp;&nbsp;</text>
                }
                
                Time: <b>@(Model.TimeTakenMs.ToString("n0"))ms</b> &nbsp;&nbsp;&nbsp;&nbsp;
                First byte: <b>@(Model.TimeToFirstByteMs.ToString("n0"))ms</b>                
            </div>
        </div>
        <div class="codewrapper grey-gradient">            
            <div class="@cssClass first-line">HTTP/1.1 @Model.StatusCode @Model.StatusDescription</div>
            <pre id="ResponseHeaders">@Model.ResponseHeaders.Trim()</pre>        
        </div>

        if (Model.ResponseContent != null)
        {
            <div class="header" style="margin-top: 0">

                @if (responseBodyType != null)
                {
                    if ("html,json,xml,css,javascript,image".Contains(responseBodyType))
                    {
                        <div class="formattingResponseBody">                            
                            @if ("xml,html,json,js".Contains(responseBodyType))
                            {
                                <a href="app://preview/" 
                                   title="Use the configured Shell association to view the content. This is your default browser for HTML and editor or viewer for XML and JSON typically">Viewer</a>
                            }
                            <a href="javascript:{}" data-id="Formatted" title="See a formatted and syntax colored view of the HTTP response based on the content type">Formatted @responseBodyType</a>
                            <a href="javascript:{}" data-id="Raw" class="active" title="The raw HTTP response content as returned by the server">Raw Response</a>

                        </div>
                    }                   
                }
                <i class="fa fa-minus-square code-collapse"></i>
                <i class="fa fa-cloud-download"></i> Http Response Body 
            </div>
           
            <div class="codewrapper" style="width: 100%"> 
                @if(responseBodyType == "image")
                {
                    <img id="ResponseBodyFormatted" 
                         src="@Model.ResponseContent" 
                         style="display: block; max-width: 100%; background: transparent; margin: 1em auto" />
                    <pre id="ResponseBodyRaw"  style="display:none;white-space: pre-line; word-break: break-all">@Model.ResponseContent.Trim()</pre>
                }
                else if (responseBodyType != null)
                {                                        
                    <pre id="ResponseBodyFormatted" style="display:none;">@Model.GetFormattedContent(Model.ResponseContent.Trim(), responseBodyType)</pre>
                    <pre id="ResponseBodyRaw"  style="display:none;">@Model.ResponseContent.Trim()</pre>                    
                }   
            </div>                     
        }
    }
	
    <script src="scripts/Ace/ace.js" charset="utf-8"></script>
    <script src="scripts/jquery.min.js"></script>
    <script>
        window.serverVars = {
            responseLanguage: "@responseBodyType",
            requestLanguage: "@requestBodyType",
            theme: "@App.Configuration.StressTester.FormattedPreviewTheme",
            showLineNumbers: false,
            allowEdit: false,
            baseUrl: ""
        };
        
    </script>
    <script src="scripts/Request.js"></script>
</body>
</html>